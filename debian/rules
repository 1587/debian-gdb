#!/usr/bin/make -f

DEB_BUILDDIR := $(shell pwd)/objdir

# This implements the .deb package creation using debhelper.
include /usr/share/cdbs/1/rules/debhelper.mk

# This implements building using a configure script and Makefile.
include /usr/share/cdbs/1/class/autotools.mk

# Quilt-based patches in debian/patches.
include /usr/share/cdbs/1/rules/patchsys-quilt.mk

# Override CDBS's default CFLAGS, which also includes -Wall; gdb
# does not handle -Wunused well with -Werror, but defaults to
# -Werror.
CFLAGS = -g $(DEB_OPT_FLAG)

install = /usr/bin/install -p

# Rather paranoid than sorry. Make the shell exit with an error if an
# untested command fails.
SHELL += -e

DEB_HOST_GNU_SYSTEM := $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)
DEB_HOST_GNU_CPU := $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
DEB_HOST_GNU_TYPE := $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)

# Cross configuration support.  Check for an environment variable
# $GDB_TARGET, or a file debian/target.
ifndef GDB_TARGET
DEBIAN_TARGET_FILE := $(strip $(shell cat debian/target 2>/dev/null))
ifneq ($(DEBIAN_TARGET_FILE),)
GDB_TARGET := $(DEBIAN_TARGET_FILE)
endif
endif

DEB_TARGET_ARCH	:= $(shell dpkg-architecture -f \
		     -a$(GDB_TARGET) -qDEB_HOST_ARCH 2>/dev/null)
DEB_TARGET_GNU_TYPE := $(shell dpkg-architecture -f \
			 -a$(DEB_TARGET_ARCH) -qDEB_HOST_GNU_TYPE 2>/dev/null)
DEB_TARGET_ALIAS ?= $(DEB_TARGET_GNU_TYPE)

ifeq ($(DEB_TARGET_ARCH),)
$(error GDB_TARGET value "$(GDB_TARGET)" is not a valid Debian architecture)
endif

ifdef GDB_TARGET
  DEB_CROSS = yes
  # TP: Target Prefix. Used primarily as a prefix for cross tool
  #     names (e.g. powerpc-linux-gcc).
  # TS: Target Suffix. Used primarily at the end of cross compiler
  #     package names (e.g. gcc-powerpc).
  TP = $(DEB_TARGET_ALIAS)-
  TS = -$(DEB_TARGET_ALIAS)
  CROSS_FORCE = FORCE
endif

run_tests := yes
run_thread_tests := yes

ifneq ($(DEB_HOST_GNU_SYSTEM),linux-gnu)
  run_tests := no
endif

ifeq ($(filter $(DEB_HOST_GNU_CPU),alpha i486 hppa ia64 powerpc s390 sparc x86_64),)
  run_tests := no
endif

ifeq ($(DEB_HOST_GNU_CPU),ia64)
  arch_config_args := --with-libunwind
endif

ifdef GDB_TARGET
  run_tests := no

  arch_config_args += --program-prefix=$(TP) \
    --target=$(DEB_TARGET_ALIAS) --with-sysroot=/usr/$(DEB_TARGET_ALIAS)
endif

INSTALL = $(install)
export INSTALL

# We pass srcdir explicitly to avoid an extra '/.' at the end of it.  That
# causes a harmless, but ugly, testsuite failure in maint.exp.
DEB_CONFIGURE_EXTRA_FLAGS := $(DEB_HOST_GNU_TYPE) --disable-gdbtk \
	--disable-shared --enable-tui --srcdir=$(shell pwd) \
	$(arch_config_args)

DEB_MAKE_BUILD_TARGET = all info

post-patches::
	if ! test -f gdb/version.in.backup; then \
	  mv -f gdb/version.in gdb/version.in.backup; \
	  sed -e 's/$$/-debian/' < gdb/version.in.backup > gdb/version.in; \
	fi

# This should probably be common-post-build-arch, but that runs during
# install, under fakeroot, in CDBS 0.4.21.
build/gdb$(TS):: check-stamp
	$(MAKE) -C objdir/gdb/doc refcard.dvi refcard.ps

check-stamp:
ifeq ($(run_tests),yes)
ifeq ($(run_thread_tests),no)
	echo "	$(foreach exp,$(wildcard gdb/testsuite/gdb.threads/*.exp),mv $(exp) $(exp).disabled;)"
	$(foreach exp,$(wildcard gdb/testsuite/gdb.threads/*.exp),mv $(exp) $(exp).disabled;)
endif
	-ulimit -c unlimited; \
	$(MAKE) -C objdir/gdb check \
		2>&1 | tee objdir/check.log
ifeq ($(run_thread_tests),no)
	$(foreach exp,$(wildcard gdb/testsuite/gdb.threads/*.exp.disabled),mv $(exp) $(subst .disabled,,$(exp);))
endif
endif
	touch $@

clean::
	rm -rf objdir

	if test -f gdb/version.in.backup; then \
	  mv -f gdb/version.in.backup gdb/version.in; \
	fi

#	# For snapshots this is appropriate; careful of release tarballs
#	# which include .gmo files.
#	find -type f -name '*.gmo' | xargs rm -f

	# Prevent gratuitous rebuilds of the BFD documentation, since it
	# updates the copy in the source directory.
	find bfd -name bfd.info\* | xargs --no-run-if-empty touch

	rm -f check-stamp

binary-post-install/gdb$(TS) ::
	if [ -x debian/gdb$(TS)/usr/bin/run ]; then				\
		mv debian/gdb$(TS)/usr/bin/run					\
		  debian/gdb$(TS)/usr/bin/$(DEB_TARGET_ALIAS)-run;		\
		mv debian/gdb$(TS)/usr/share/man/man1/run.1			\
		  debian/gdb$(TS)/usr/share/man/man1/$(DEB_TARGET_ALIAS)-run.1;	\
	fi
ifeq ($(run_tests),yes)
	install -d debian/gdb$(TS)/usr/share/doc/gdb
	install -m 644 objdir/check.log \
		debian/gdb$(TS)/usr/share/doc/gdb/check.log
endif

	$(INSTALL) -m 755 -o root -g root \
		gdb/gdb_gcore.sh debian/gdb$(TS)/usr/bin/$(TP)gcore

	rm -rf debian/gdb$(TS)/usr/include \
		debian/gdb$(TS)/usr/lib/lib*.* \
		debian/gdb$(TS)/usr/share/info/annotate.info* \
		debian/gdb$(TS)/usr/share/info/bfd.info* \
		debian/gdb$(TS)/usr/share/info/configure.info* \
		debian/gdb$(TS)/usr/share/info/mmalloc.info* \
		debian/gdb$(TS)/usr/share/info/standards.info* \
		debian/gdb$(TS)/usr/share/locale

	# Remove the entire info directory; it only contains dummy files,
	# not the real manuals.
	rm -rf debian/gdb$(TS)/usr/share/info

debian/control:: debian/control.in $(CROSS_FORCE)
	cat debian/control.in \
		| sed "s/@kfreebsd@/`type-handling any kfreebsd`/g" \
		| sed "s/@gnu@/`type-handling any gnu`/g" \
		| sed "s/@TS@/$(TS)/g" \
		> debian/control

DEB_INSTALL_DOCS_gdb$(TS) = gdb/NEWS gdb/README gdb/doc/refcard.tex \
		objdir/gdb/doc/refcard.dvi objdir/gdb/doc/refcard.ps

DEB_INSTALL_CHANGELOGS_gdb$(TS) = gdb/ChangeLog

.PHONY: FORCE
FORCE:
